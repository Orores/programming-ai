import unittest
import numpy as np
from PIL import Image
import tempfile
import os
from sandbox_scripts.debayer import Debayer

class TestDebayer(unittest.TestCase):

    def create_bayer_image(self, pattern, width=4, height=4):
        """
        Create a simple Bayer pattern image.
        """
        data = np.zeros((height, width), dtype=np.uint8)
        
        if pattern == 'bggr':
            data[::2, ::2] = 255  # Blue
            data[1::2, 1::2] = 255  # Green
            data[::2, 1::2] = 128  # Green
            data[1::2, ::2] = 128  # Red
        elif pattern == 'rggb':
            data[::2, ::2] = 255  # Red
            data[1::2, 1::2] = 255  # Blue
            data[::2, 1::2] = 128  # Green
            data[1::2, ::2] = 128  # Green
        elif pattern == 'grbg':
            data[::2, 1::2] = 255  # Red
            data[1::2, ::2] = 255  # Blue
            data[::2, ::2] = 128  # Green
            data[1::2, 1::2] = 128  # Green
        elif pattern == 'gbrg':
            data[::2, 1::2] = 255  # Blue
            data[1::2, ::2] = 255  # Red
            data[::2, ::2] = 128  # Green
            data[1::2, 1::2] = 128  # Green

        return data

    def test_debayer_bggr(self):
        bayer_pattern = 'bggr'
        bayer_data = self.create_bayer_image(bayer_pattern)

        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
            img = Image.fromarray(bayer_data, mode='L')
            img.save(temp_file.name)
            temp_file_path = temp_file.name

        try:
            debayered_image = Debayer.debayer_image(temp_file_path, bayer_pattern)
            debayered_image_array = np.array(debayered_image)

            # Expected debayered image shape
            self.assertEqual(debayered_image_array.shape, (4, 4, 3))

            # Check if the debayered image has the correct values
            self.assertTrue(np.all(debayered_image_array[::2, ::2, 2] == 255))  # Blue channel
            self.assertTrue(np.all(debayered_image_array[1::2, 1::2, 1] == 255))  # Green channel
            self.assertTrue(np.all(debayered_image_array[::2, 1::2, 1] == 128))  # Green channel
            self.assertTrue(np.all(debayered_image_array[1::2, ::2, 0] == 128))  # Red channel

        finally:
            os.remove(temp_file_path)

    def test_debayer_rggb(self):
        bayer_pattern = 'rggb'
        bayer_data = self.create_bayer_image(bayer_pattern)

        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
            img = Image.fromarray(bayer_data, mode='L')
            img.save(temp_file.name)
            temp_file_path = temp_file.name

        try:
            debayered_image = Debayer.debayer_image(temp_file_path, bayer_pattern)
            debayered_image_array = np.array(debayered_image)

            # Expected debayered image shape
            self.assertEqual(debayered_image_array.shape, (4, 4, 3))

            # Check if the debayered image has the correct values
            self.assertTrue(np.all(debayered_image_array[::2, ::2, 0] == 255))  # Red channel
            self.assertTrue(np.all(debayered_image_array[1::2, 1::2, 2] == 255))  # Blue channel
            self.assertTrue(np.all(debayered_image_array[::2, 1::2, 1] == 128))  # Green channel
            self.assertTrue(np.all(debayered_image_array[1::2, ::2, 1] == 128))  # Green channel

        finally:
            os.remove(temp_file_path)

    # Additional tests for 'grbg' and 'gbrg' patterns can be added similarly
    def test_debayer_grbg(self):
        bayer_pattern = 'grbg'
        bayer_data = self.create_bayer_image(bayer_pattern)

        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
            img = Image.fromarray(bayer_data, mode='L')
            img.save(temp_file.name)
            temp_file_path = temp_file.name

        try:
            debayered_image = Debayer.debayer_image(temp_file_path, bayer_pattern)
            debayered_image_array = np.array(debayered_image)

            # Expected debayered image shape
            self.assertEqual(debayered_image_array.shape, (4, 4, 3))

            # Check if the debayered image has the correct values
            self.assertTrue(np.all(debayered_image_array[::2, 1::2, 0] == 255))  # Red channel
            self.assertTrue(np.all(debayered_image_array[1::2, ::2, 2] == 255))  # Blue channel
            self.assertTrue(np.all(debayered_image_array[::2, ::2, 1] == 128))  # Green channel
            self.assertTrue(np.all(debayered_image_array[1::2, 1::2, 1] == 128))  # Green channel

        finally:
            os.remove(temp_file_path)

    def test_debayer_gbrg(self):
        bayer_pattern = 'gbrg'
        bayer_data = self.create_bayer_image(bayer_pattern)

        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as temp_file:
            img = Image.fromarray(bayer_data, mode='L')
            img.save(temp_file.name)
            temp_file_path = temp_file.name

        try:
            debayered_image = Debayer.debayer_image(temp_file_path, bayer_pattern)
            debayered_image_array = np.array(debayered_image)

            # Expected debayered image shape
            self.assertEqual(debayered_image_array.shape, (4, 4, 3))

            # Check if the debayered image has the correct values
            self.assertTrue(np.all(debayered_image_array[::2, 1::2, 2] == 255))  # Blue channel
            self.assertTrue(np.all(debayered_image_array[1::2, ::2, 0] == 255))  # Red channel
            self.assertTrue(np.all(debayered_image_array[::2, ::2, 1] == 128))  # Green channel
            self.assertTrue(np.all(debayered_image_array[1::2, 1::2, 1] == 128))  # Green channel

        finally:
            os.remove(temp_file_path)

if __name__ == "__main__":
    unittest.main()


