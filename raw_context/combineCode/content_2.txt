Combine following code:

import os
from dotenv import load_dotenv
import requests
import argparse

from StringFileReader import StringFileReader
from ConversationJsonReader import ConversationJsonReader
from ParserCreator import ParserCreator
from GPTChatCompletion import GPT3ChatCompletion
from GPTChatCompletionSaver import ChatCompletionSaver
from ContextManager import ContextManager


class ChatBot:
    """
    ChatBot: This class combines the functionality of both GPT3ChatCompletion and FileReader classes.
    It automatically reads files, determines whether they contain conversations or single questions,
    and utilizes GPT-3 for chat completion accordingly.
    """

    def __init__(self):
        self.chat_completion = GPT3ChatCompletion()
        self.parser_creator = ParserCreator()
        self.conversation_json_reader = ConversationJsonReader()
        self.string_file_reader = StringFileReader()
        self.openai_completion_saver = ChatCompletionSaver()
        self.context_manager = ContextManager(context_folder = 'context_prompts')

    def decide_conversation(self, args):
        if args.file_path:
            try:
                conversation = self.conversation_json_reader.read_file(args.file_path)
            except ValueError as e:
                conversation = self.string_file_reader.read_file(args.file_path)
        elif args.question:
            conversation = args.question
        else:
            raise ValueError("No conversation or question provided.")
       
        return conversation

    def str_to_dict_list(self, conversation):
        if isinstance(conversation, str):
            conversation = [{"role": "user", "content": conversation}]
        return conversation

    def extend_context(self, args, conversation):
        if args.context is not None:
            try:
                context = self.context_manager.retrieve_context(args.context)
                context.extend(conversation)
                conversation=context
            except FileNotFoundError:
                exit()
        return conversation



    def run(self):
        args = self.parser_creator.parser.parse_args()
        conversation = self.decide_conversation(args)
        conversation = self.str_to_dict_list(conversation)
        conversation = self.extend_context(args, conversation)
        response = self.chat_completion.make_api_request(
                conversation = conversation,
                model = args.model,
                temperature = args.temperature,
                max_tokens = args.max_tokens,
                stop_sequences = args.stop_sequences,
                frequency_penalty = args.frequency_penalty,
                presence_penalty = args.presence_penalty,
                top_p = args.top_p,
                )

        #print("Chat Completion Response:", response)
        self.openai_completion_saver.save_to_file(response, args.save_path)


if __name__ == '__main__':
    bot = ChatBot()
    bot.run()






import os
import subprocess

class PyFileExecutor:
    """
    PyFileExecutor: This class takes a file path and a string, saves the string as a .py file, and executes it using a subprocess.

    Init parameters:
    - file_path (str): Path to the .py file.
    - code (str): String representing the Python code to be executed.

    Main method:
    - execute(): Saves the code as a .py file, executes it using a subprocess, and returns the error output or None if there is no error output.

    Example usage:
        executor = PyFileExecutor(file_path="script.py", code="print('Hello, World!')")
        error_output = executor.execute()
        if error_output:
            print("Error Output:", error_output)
        else:
            print("Execution completed successfully.")
    """

    def __init__(self, file_path, code):
        self.file_path = file_path
        self.code = code

    def execute(self):
        """
        Saves the code as a .py file, executes it using a subprocess, and returns the error output or None if there is no error output.

        Returns:
        - str or None: Error output if there is an error, None if there is no error.
        """
        try:
            # Step 1: Create the directory if it does not exist
            directory, file_name = os.path.split(self.file_path)
            if directory:
                os.makedirs(directory, exist_ok=True)

            # Step 2: Save the code as a .py file
            with open(self.file_path, 'w') as file:
                file.write(self.code)

            # Step 3: Prepare the command for executing the .py file
            command = ["python"]
            if directory:
                command.extend([os.path.join(directory, file_name)])
            else:
                command.append(file_name)

            # Step 4: Execute the .py file using a subprocess
            process = subprocess.run(command, capture_output=True)

            # Step 5: Check if there is any error output
            if process.stderr:
                return process.stderr.decode().strip()
            else:
                return None
        except Exception as e:
            return str(e)

# Usage example:
if __name__ == "__main__":
    code = """
print('Hello, World!')
    """

    executor = PyFileExecutor(file_path="sandbox_scripts/script.py", code=code)
    error_output = executor.execute()
    if error_output:
        print("Error Output:", error_output)
    else:
        print("Execution completed successfully.")


