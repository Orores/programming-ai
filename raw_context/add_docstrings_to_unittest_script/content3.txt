import unittest
from unittest.mock import patch
import requests
from sandbox_scripts.myscript import WikipediaFetcher

class TestWikipediaFetcher(unittest.TestCase):
    """
    Short Description:
    This class contains unit tests for the WikipediaFetcher class, which fetches content from Wikipedia pages.
    
    Testing Strategy:
    The testing strategy covers the following cases:
    1. Successful fetch of a Wikipedia page with an extract.
    2. Fetch of a Wikipedia page without an extract field.
    3. Fetch of a non-existent Wikipedia page.
    4. Handling of request exceptions.
    5. Actual API call to ensure the WikipediaFetcher works with real data.

    Methods:
    - test_fetch_wikipedia_page_success:
        Tests the `fetch_wikipedia_page` method for a successful fetch with an extract.
    - test_fetch_wikipedia_page_no_extract:
        Tests the `fetch_wikipedia_page` method for a page without an extract field.
    - test_fetch_wikipedia_page_invalid_page:
        Tests the `fetch_wikipedia_page` method for a non-existent Wikipedia page.
    - test_fetch_wikipedia_page_error_handling:
        Tests the `fetch_wikipedia_page` method for handling request exceptions.
    - test_fetch_wikipedia_page_actual_api_call:
        Tests the `fetch_wikipedia_page` method with an actual API call to ensure real-world functionality.

    Properties Ensured:
    - Correct handling of pages with and without extracts.
    - Appropriate response for non-existent pages.
    - Proper exception handling for request errors.
    - Verification of real-world API functionality.
    """

    @patch('requests.get')
    def test_fetch_wikipedia_page_success(self, mock_get):
        """
        Short Description:
        Tests the `fetch_wikipedia_page` method for a successful fetch with an extract.

        Test Strategy:
        Uses a mock response to simulate a successful API call with an extract field.

        Expected Outcome:
        The method should return the content of the extract field.
        """
        mock_response = {
            "query": {
                "pages": {
                    "12345": {
                        "pageid": 12345,
                        "ns": 0,
                        "title": "Python (programming language)",
                        "extract": "Python is an interpreted high-level general-purpose programming language."
                    }
                }
            }
        }
        mock_get.return_value.json.return_value = mock_response

        page_title = "Python (programming language)"
        expected_content = "Python is an interpreted high-level general-purpose programming language."
        actual_content = WikipediaFetcher.fetch_wikipedia_page(page_title)
        
        self.assertEqual(expected_content, actual_content)

    @patch('requests.get')
    def test_fetch_wikipedia_page_no_extract(self, mock_get):
        """
        Short Description:
        Tests the `fetch_wikipedia_page` method for a page without an extract field.

        Test Strategy:
        Uses a mock response to simulate an API call where the extract field is missing.

        Expected Outcome:
        The method should return an empty string.
        """
        mock_response = {
            "query": {
                "pages": {
                    "12345": {
                        "pageid": 12345,
                        "ns": 0,
                        "title": "Python (programming language)"
                        # No 'extract' field
                    }
                }
            }
        }
        mock_get.return_value.json.return_value = mock_response

        page_title = "Python (programming language)"
        expected_content = ""
        actual_content = WikipediaFetcher.fetch_wikipedia_page(page_title)
        
        self.assertEqual(expected_content, actual_content)

    @patch('requests.get')
    def test_fetch_wikipedia_page_invalid_page(self, mock_get):
        """
        Short Description:
        Tests the `fetch_wikipedia_page` method for a non-existent Wikipedia page.

        Test Strategy:
        Uses a mock response to simulate an API call for a non-existent page.

        Expected Outcome:
        The method should return an empty string.
        """
        mock_response = {
            "query": {
                "pages": {
                    "-1": {
                        "missing": True
                    }
                }
            }
        }
        mock_get.return_value.json.return_value = mock_response

        page_title = "NonExistentPage"
        expected_content = ""
        actual_content = WikipediaFetcher.fetch_wikipedia_page(page_title)
        
        self.assertEqual(expected_content, actual_content)

    @patch('requests.get')
    def test_fetch_wikipedia_page_error_handling(self, mock_get):
        """
        Short Description:
        Tests the `fetch_wikipedia_page` method for handling request exceptions.

        Test Strategy:
        Simulates a request exception using a mock side effect.

        Expected Outcome:
        The method should raise a requests.exceptions.RequestException.
        """
        mock_get.side_effect = requests.exceptions.RequestException("Request failed")

        page_title = "Python (programming language)"
        with self.assertRaises(requests.exceptions.RequestException):
            WikipediaFetcher.fetch_wikipedia_page(page_title)

    def test_fetch_wikipedia_page_actual_api_call(self):
        """
        Short Description:
        Tests the `fetch_wikipedia_page` method with an actual API call to ensure real-world functionality.

        Test Strategy:
        Calls the method with a real Wikipedia page title.

        Expected Outcome:
        The method should return non-empty content.
        """
        page_title = "Python (programming language)"
        content = WikipediaFetcher.fetch_wikipedia_page(page_title)
        
        # Check if the content is not empty
        self.assertNotEqual(content, "")

if __name__ == "__main__":
    unittest.main()
