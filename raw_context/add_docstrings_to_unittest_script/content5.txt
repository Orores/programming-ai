import unittest
from unittest.mock import patch
from sandbox_scripts.guess_number import GuessNumberGame

class TestGuessNumberGame(unittest.TestCase):
    """
    Short Description:
    This class contains unit tests for the GuessNumberGame class, which implements a number guessing game.
    
    Testing Strategy:
    The testing strategy covers the following cases:
    1. Correct guess of the number.
    2. Guess that is lower than the number to guess.
    3. Guess that is higher than the number to guess.
    4. Simulation of the entire gameplay where the correct number is guessed.

    Methods:
    - setUp:
        Initializes the settings for the tests, including the range and number to guess.
    - test_guess_correct:
        Tests the `guess` method when the correct number is guessed.
    - test_guess_higher:
        Tests the `guess` method when the guessed number is lower than the number to guess.
    - test_guess_lower:
        Tests the `guess` method when the guessed number is higher than the number to guess.
    - test_play_game_correct:
        Tests the `play_game` method by simulating user input to guess the correct number.

    Properties Ensured:
    - Correct detection of the guessed number.
    - Appropriate hints (higher/lower) for incorrect guesses.
    - Successful completion of the game when the correct number is guessed.
    """

    def setUp(self):
        """
        Short Description:
        Initializes the settings for the tests, including the range and number to guess.

        Test Strategy:
        Sets up a dictionary with the minimum, maximum, and the number to guess.

        Expected Outcome:
        The settings should be correctly initialized.
        """
        self.settings = {'min': 1, 'max': 100, 'number_to_guess': 42}

    def test_guess_correct(self):
        """
        Short Description:
        Tests the `guess` method when the correct number is guessed.

        Test Strategy:
        Calls the `guess` method with the correct number.

        Expected Outcome:
        The method should return "Correct".
        """
        result = GuessNumberGame.guess(self.settings, 42)
        self.assertEqual(result, "Correct")
    
    def test_guess_higher(self):
        """
        Short Description:
        Tests the `guess` method when the guessed number is lower than the number to guess.

        Test Strategy:
        Calls the `guess` method with a number lower than the number to guess.

        Expected Outcome:
        The method should return "Higher".
        """
        result = GuessNumberGame.guess(self.settings, 30)
        self.assertEqual(result, "Higher")
    
    def test_guess_lower(self):
        """
        Short Description:
        Tests the `guess` method when the guessed number is higher than the number to guess.

        Test Strategy:
        Calls the `guess` method with a number higher than the number to guess.

        Expected Outcome:
        The method should return "Lower".
        """
        result = GuessNumberGame.guess(self.settings, 50)
        self.assertEqual(result, "Lower")
    
    @patch('builtins.input', side_effect=['42'])
    @patch('builtins.print')
    def test_play_game_correct(self, mock_print, mock_input):
        """
        Short Description:
        Tests the `play_game` method by simulating user input to guess the correct number.

        Test Strategy:
        Uses mock input to simulate the user guessing the correct number immediately.

        Expected Outcome:
        The method should print a congratulatory message for guessing the correct number.
        """
        self.settings['number_to_guess'] = 42
        with patch('random.randint', return_value=42):
            GuessNumberGame.play_game(self.settings)
        mock_print.assert_any_call("Congratulations! You guessed the number.")

if __name__ == "__main__":
    unittest.main()
