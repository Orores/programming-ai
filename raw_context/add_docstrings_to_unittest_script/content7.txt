from PIL import Image
import numpy as np
import tempfile
import os
import unittest
from sandbox_scripts.luminance_histogram import LuminanceHistogram

class TestLuminanceHistogram(unittest.TestCase):

    def test_compute_luminance_histogram_default_params(self):
        # Create a temporary directory
        with tempfile.TemporaryDirectory() as tempdir:
            # Define the path for the test image
            img_path = os.path.join(tempdir, "test_image.png")
            
            # Create a simple grayscale image with known luminance values
            data = np.array([
                [0, 64, 128, 192, 255],
                [0, 64, 128, 192, 255],
                [0, 64, 128, 192, 255],
                [0, 64, 128, 192, 255],
                [0, 64, 128, 192, 255]
            ], dtype=np.uint8)
            
            img = Image.fromarray(data, mode='L')
            img.save(img_path)

            # Expected histogram with default parameters (bins=5, range=(0, 256))
            expected_histogram = [5, 5, 5, 5, 5]

            # Compute the actual histogram
            actual_histogram = LuminanceHistogram.compute_luminance_histogram(img_path)

            # Assert the histogram is as expected
            self.assertEqual(expected_histogram, actual_histogram)

    def test_compute_luminance_histogram_custom_params(self):
        # Create a temporary directory
        with tempfile.TemporaryDirectory() as tempdir:
            # Define the path for the test image
            img_path = os.path.join(tempdir, "test_image.png")
            
            # Create a simple grayscale image with known luminance values
            data = np.array([
                [0, 64, 128, 192, 255],
                [0, 64, 128, 192, 255],
                [0, 64, 128, 192, 255],
                [0, 64, 128, 192, 255],
                [0, 64, 128, 192, 255]
            ], dtype=np.uint8)
            
            img = Image.fromarray(data, mode='L')
            img.save(img_path)

            # Expected histogram with custom parameters (bins=10, range=(0, 256))
            expected_histogram = [5, 0, 5, 0, 0, 5, 0, 5, 0, 5]

            # Compute the actual histogram
            actual_histogram = LuminanceHistogram.compute_luminance_histogram(img_path, bins=10, luminance_range=(0, 256))

            # Assert the histogram is as expected
            self.assertEqual(expected_histogram, actual_histogram)

    def test_plot_and_save_histogram(self):
        # Create a temporary directory
        with tempfile.TemporaryDirectory() as tempdir:
            # Use the previous test to generate a histogram
            img_path = os.path.join(tempdir, "test_image.png")
            
            data = np.array([
                [0, 64, 128, 192, 255],
                [0, 64, 128, 192, 255],
                [0, 64, 128, 192, 255],
                [0, 64, 128, 192, 255],
                [0, 64, 128, 192, 255]
            ], dtype=np.uint8)
            
            img = Image.fromarray(data, mode='L')
            img.save(img_path)

            histogram = LuminanceHistogram.compute_luminance_histogram(img_path, bins=10, luminance_range=(0, 256))

            # Define the path for the histogram plot
            plot_path = os.path.join(tempdir, "histogram_plot.png")

            # Plot and save the histogram
            LuminanceHistogram.plot_and_save_histogram(histogram, plot_path, bins=10, luminance_range=(0, 256))

            # Check if the plot was saved
            self.assertTrue(os.path.exists(plot_path))

if __name__ == "__main__":
    unittest.main()
