import requests
from dotenv import load_dotenv
import os
import datetime

class OpenAIAssistant:
    """A class representing an AI assistant that interacts with the OpenAI API to provide responses to user questions."""
    
    def __init__(self):
        """
        Initializes the OpenAIAssistant object by loading the API key, setting endpoint URL, and file names for conversation storage.
        """
        load_dotenv()
        self.api_key = os.getenv("OPENAI_API_KEY")
        self.endpoint_url = 'https://api.openai.com/v1/chat/completions'
        self.input_file = 'question.tmp'
        self.output_file = 'response.tmp'
        self.conversation_history = []
        self.language = ''
        self.context_data = {}
        self.response_time = None
        self.user_info = {}

    def make_api_request(self, conversation):
        """
        Makes an API request to the OpenAI GPT-3.5-turbo model using the given conversation data.

        Args:
            conversation (list of dicts): List of dictionaries representing the conversation.

        Returns:
            Response object: Response object from the API request.
        """
        data = {
            "model": "gpt-3.5-turbo",
            "messages": conversation
        }
        headers = {
            'Authorization': f'Bearer {self.api_key}',
            'Content-Type': 'application/json'
        }
        return requests.post(self.endpoint_url, headers=headers, json=data)

    def extract_assistant_reply(self, response):
        """
        Extracts the assistant's reply from the API response.

        Args:
            response (Response object): API response object.

        Returns:
            str: Assistant's reply extracted from the response.
        """
        if response.status_code == 200:
            return response.json()['choices'][0]['message']['content']
        else:
            return f"Error: {response.status_code} {response.text}"

    def extract_string_from_file(self):
        """
        Extracts data from a file with the name specified in the object's input_file attribute.

        Returns:
            str: Data read from the file.
        """
        try:
            with open(self.input_file, 'r') as file:
                data = file.read()
                return data
        except FileNotFoundError:
            print("File not found.")
            return None

    def ask_question(self, question):
        """
        Initiates a conversation by asking a question to the AI assistant.

        Args:
            question (str): User's question to be asked.

        Returns:
            str: Response generated by the AI assistant.
        """
        conversation = [
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": question}
        ]
        
        response = self.make_api_request(conversation)
        
        # Update conversation history, language, context data, response time, and user info
        self.conversation_history.append(conversation)
        self.language = 'English'
        self.context_data = {'topic': 'General'}
        self.response_time = datetime.datetime.now()
        self.user_info = {'name': 'UserA', 'age': 30}
        
        return self.extract_assistant_reply(response)

    def write_response_to_file(self, response, output_file):
        """
        Writes the assistant's response to a specified output file.

        Args:
            response (str): Assistant's response to be written to the file.
            output_file (str): Name of the output file to write the response to.
        """
        with open(output_file, 'w') as file:
            file.write(response)
            print(f"Assistant's reply has been saved to {output_file}")

