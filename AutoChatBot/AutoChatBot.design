# AutoChatBot Design

## Abstract
The `AutoChatBot` class is the main orchestrator for the chatbot functionalities. It incorporates various components such as context management, API handling, and code execution. This design document outlines the integration of the `MultiFileAgent` into the `AutoChatBot`, the addition of a new parser argument for calling the multi-file agent, and the expansion of the testing strategy. Additionally, it supports reading the question from a file to handle long questions conveniently and executing a list of files, returning their stdout and stderr outputs. The design ensures that CLI arguments are used for making API calls, and these arguments are passed from `AutoChatBot` to `MultiFileAgent`.

## Class Design

### Methods

1. **main**
   - **Description**: The main method to run the chatbot. It parses arguments and executes the chatbot logic.
   - **Arguments**: None.
   - **Returns**: None.

2. **execute_multifile_agent**
   - **Description**: Executes the multi-file agent to generate and update multiple files based on reference files and user-provided questions.
   - **Arguments**:
     - `reference_files` (`list`): List of paths to the reference files. Can be an empty list.
     - `rewrite_files` (`list`): List of paths to the rewrite files.
     - `question` (`str`, optional): The question to be included in the task string. Default is `None`.
     - `question_file_path` (`str`, optional): The path to the file containing the question. Default is `None`.
     - `args` (`Namespace`): Parsed CLI arguments for API call.
     - `debug` (`bool`): Debug flag.
   - **Returns**: `dict`: Dictionary with file paths as keys and generated content as values.

3. **execute_files**
   - **Description**: Executes a list of Python files and captures their stdout and stderr outputs.
   - **Arguments**:
     - `file_paths` (`list`): List of paths to Python files to be executed.
   - **Returns**: `dict`: Dictionary with file paths as keys and tuples of (stdout, stderr) as values.

### Error Handling

- **execute_multifile_agent**
  - **FileNotFoundError**: Raised if any reference file does not exist.
  - **IOError**: Raised if there is an issue reading the files.

- **execute_files**
  - **FileNotFoundError**: Raised if any file to be executed does not exist.
  - **ExecutionError**: Raised if there is an error during file execution.

### How it Works

1. **main**:
   - Step 1: Parse command-line arguments using `argparse`.
   - Step 2: Depending on the parsed arguments, execute the appropriate functionality such as showing available contexts, showing models, running code, executing the multi-file agent, or executing files.

2. **execute_multifile_agent**:
   - Step 1: Call `MultiFileAgent.execute` with the provided reference files, rewrite files, question, question file path, and CLI arguments.
   - Step 2: Handle cases where reference files are not provided by passing an empty list.
   - Step 3: Return the dictionary with the generated content.

3. **execute_files**:
   - Step 1: Call `PythonFileExecutor.execute` with the provided file paths.
   - Step 2: Return the dictionary with the execution outputs.

### Class Paradigm

- The class follows a procedural paradigm with static methods.
- Uses modular design to separate different functionalities.

### Testing Strategy

- **Test `main`**:
  - Verify that the method correctly parses arguments and executes the corresponding functionalities.
  - Mock external dependencies such as file I/O and API requests.

- **Test `execute_multifile_agent`**:
  - Verify that the method correctly integrates with `MultiFileAgent`.
  - Include tests that mock file I/O and API requests to ensure the method's robustness.
  - Ensure it handles cases with no reference files gracefully.

- **Test `execute_files`**:
  - Verify that the method correctly executes files and captures their outputs.
  - Include tests that mock file execution to ensure the method's robustness.

### Integration

- **MultiFileAgent**: Integrated as a static method call within `AutoChatBot`.
- **PythonFileExecutor**: Integrated as a static method call within `AutoChatBot`.
- **Parser Argument**: Added new arguments `--multi_file_agent` and `--execute_files` to trigger the multi-file agent functionality and specify files to execute.
- **Question File Path**: Added a new argument `--question_file_path` to specify a file containing the question.
- **Output Directory**: Added a new argument `--output_dir` to specify the directory where plots will be saved.
- **CLI Arguments for API Calls**: The CLI arguments parsed in `AutoChatBot` are passed to `MultiFileAgent` for making API calls, ensuring flexibility and consistency.

### Example Usage

```python
if __name__ == "__main__":
    reference_files = ["reference_code/workout_tracker.design", "reference_code/test_workout_tracker.py"]
    rewrite_files = ["AutoChatBot/AutoChatBot.design", "AutoChatBot/AutoChatBot.py"]
    question_file_path = "path/to/question.txt"
    
    parser = ParserCreator.create_parser()
    args = parser.parse_args()
    
    result = MultiFileAgent.execute(reference_files, rewrite_files, question_file_path=question_file_path, args=args, debug=True)
    for file_path, content in result.items():
        with open(file_path, 'w') as file:
            file.write(content)
    print("Generated Content:", result)
```