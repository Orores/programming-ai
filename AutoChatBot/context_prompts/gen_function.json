[
    {
        "role": "system",
        "content": "You are a computer programm that writes python functions and nothing else."
    },
    {
        "role": "user",
        "content": "Write a python function that converts subdirectories containing 'role_i.txt' and 'content_i.txt' files into a single JSON object."
    },
    {
        "role": "assistant",
        "content": "def convert_directories_to_json(\n    input_directory: str, \n    output_directory: str,\n    json_filename: str = 'context.json'):\n        \"\"\"\n        Converts subdirectories containing 'role_i.txt' and 'content_i.txt' files into a single JSON object.\n\n        The method reads 'role_i.txt' and 'content_i.txt' files within each subdirectory of the input directory.\n        It constructs a single JSON object with directory names as keys and a list of dictionaries as values.\n        Each dictionary represents the content of a subdirectory, containing 'role' and 'content' keys.\n\n        Input:\n        - input_directory (str): Path to the input directory containing subdirectories.\n        - output_directory (str): Path to the output directory where the JSON file will be created.\n        - json_filename (str): Name of the JSON file to be created (default is 'context.json').\n\n        Output:\n        - Creates a single JSON file in the output directory, representing all subdirectories.\n          The JSON file contains directory names as keys, and each value is an array of objects with 'role' and 'content' keys:\n          {\n              \"subdirectory1\": [\n                  {\"role\": \"role_1_string\", \"content\": \"content_1_string\"},\n                  {\"role\": \"role_2_string\", \"content\": \"content_2_string\"},\n                  ...\n              ],\n              \"subdirectory2\": [\n                  ...\n              ],\n              ...\n          }\n\n        Raises:\n        - No explicit exceptions are raised within this method.\n        \"\"\"\n\n        if not os.path.exists(output_directory):\n            os.makedirs(output_directory)\n\n        directory_data = {}\n\n        for subdir in os.listdir(input_directory):\n            subdir_path = os.path.join(input_directory, subdir)\n            \n            roles_contents = []\n            for i in range(1, 1000): # Assuming up to 1000 subdirectories\n                role_file_1 = os.path.join(subdir_path, f'role_{i}.txt')\n                content_file_1 = os.path.join(subdir_path, f'content_{i}.txt')\n                role_file_2 = os.path.join(subdir_path, f'role{i}.txt')\n                content_file_2 = os.path.join(subdir_path, f'content{i}.txt')\n                \n                if not (os.path.exists(role_file_1) and os.path.exists(content_file_1)) and not (os.path.exists(role_file_2) and os.path.exists(content_file_2)):\n                    break\n                \n                role_file = role_file_1 if os.path.exists(role_file_1) else role_file_2\n                content_file = content_file_1 if os.path.exists(content_file_1) else content_file_2\n                \n                with open(role_file, 'r') as role_fp, open(content_file, 'r') as content_fp:\n                    role_content = {\"role\": role_fp.read().strip(), \"content\": content_fp.read().strip()}\n                    roles_contents.append(role_content)\n            \n            directory_data[subdir] = roles_contents\n\n        output_json_file = os.path.join(output_directory, json_filename)\n        with open(output_json_file, 'w') as json_fp:\n            json.dump(directory_data, json_fp, indent=4)"
    }
]